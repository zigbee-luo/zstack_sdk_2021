%%{
/*
 * Copyright (c) 2019 Texas Instruments Incorporated - http://www.ti.com
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
 *  ======== ti_154stack_config.h.xdt ========
 */

// Get network settings script
const networkScript = system.getScript("/ti/ti154stack/network_config/"
+ "ti154stack_network_config");

// Get transmit power settings script
const powerScript = system.getScript("/ti/ti154stack/power_config/"
+ "ti154stack_power_config");

// Get test mode settings script
const testModeScript = system.getScript("/ti/ti154stack/test_config/"
+ "ti154stack_test_config");

// Get security settings script
const securityScript = system.getScript("/ti/ti154stack/security_config/"
+ "ti154stack_security_config");

// Get common functions script
const Common = system.getScript("/ti/ti154stack/ti154stack_common.js");

// Get the TI 15.4 module
const inst = system.modules["/ti/ti154stack/ti154stack"].$static;

function keyTable() {
    const isSecureEnabled = inst.secureLevel !== "macSecurityDisabled";
    const psk = isSecureEnabled ? inst.keyTableDefaultKey : _.repeat("F",32);
    const chunks = _.chunk(psk,2);
    return _.map(chunks, (c)=> "0x" + c[0] + c[1] );
}

function getProjectName(project) {
    switch(project) {
        case "collector":
            return "Collector";
        case "collectorSM":
            return "Collector Secure Manager (SM)";
        case "sensor":
            return "Sensor";
        case "sensorSM":
            return "Sensor Secure Manager (SM)";
        case "sensorOAD":
            return "Sensor Over-the-Air Download (OAD)";
        default:
            throw new Error("Unhanded project type: " + project);
    }
}
%%}
/******************************************************************************
 DO NOT EDIT - This file is generated by the SysConfig tool.
 @file ti_154stack_config.h

 @brief TI-15.4 Stack configuration parameters for `getProjectName(inst.project)`
 applications

 *****************************************************************************/
#ifndef TI_154STACK_CONFIG_H
#define TI_154STACK_CONFIG_H

/******************************************************************************
 Includes
 *****************************************************************************/
#include "api_mac.h"
#include "ti_154stack_features.h"

#ifdef __cplusplus
extern "C"
{
#endif
%

/* Setting for PAN ID */
#define CONFIG_PAN_ID                   `Common.toHexString(inst.panID)`

/* Setting for phy ID */
#define CONFIG_PHY_ID                   `inst.phyID`

/* Setting for channel page */
#define CONFIG_CHANNEL_PAGE             `inst.channelPage`

% let channelMaskHexArr = Common.channelMaskCHexStrArr(inst["channels"]);
/*
 Channel mask used when CONFIG_FH_ENABLE is false.
 Each bit indicates if the corresponding channel is to be scanned
 First byte represents channels 0 to 7 and the last byte represents
 channels 128 to 135.
 For byte zero in the bit mask, LSB representing Ch0.
 For byte 1, LSB represents Ch8 and so on.
 e.g., 0x01 0x10 represents Ch0 and Ch12 are included.
*/
#define CONFIG_CHANNEL_MASK             { `_.slice(channelMaskHexArr,0,6)`, \
                                          `_.slice(channelMaskHexArr,6,12)`, \
                                          `_.slice(channelMaskHexArr,12)` }

% channelMaskHexArr = Common.channelMaskCHexStrArr(inst["fhChannels"]);
/*
 Channel mask used when CONFIG_FH_ENABLE is true.
 Represents the list of channels on which the device can hop.
 The actual sequence used shall be based on DH1CF function.
 It is represented as a bit string with LSB representing Ch0.
 e.g., 0x01 0x10 represents Ch0 and Ch12 are included.
 */
 #define CONFIG_FH_CHANNEL_MASK         { `_.slice(channelMaskHexArr,0,6)`, \
                                          `_.slice(channelMaskHexArr,6,12)`, \
                                          `_.slice(channelMaskHexArr,12)` }

% channelMaskHexArr = Common.channelMaskCHexStrArr(inst["fhAsyncChannels"]);
/*
 List of channels to target asynchronous frames when CONFIG_FH_ENABLE = true.
 It is represented as a bit string with LSB representing Ch0
 e.g., 0x01 0x10 represents Ch0 and Ch12 are included
 It should cover all channels that could be used by a target device in its
 hopping sequence. Channels marked beyond number of channels supported by
 PHY Config will be excluded by stack. To avoid interference on a channel,
 it should be removed from Async Mask and excluded from the FH channel mask.
 */
#define FH_ASYNC_CHANNEL_MASK           { `_.slice(channelMaskHexArr,0,6)`, \
                                          `_.slice(channelMaskHexArr,6,12)`, \
                                          `_.slice(channelMaskHexArr,12)` }

% let allValidChannels = networkScript.getChannelOptions(inst, false);
% allValidChannels = networkScript.selectAllOptions(allValidChannels);
% channelMaskHexArr = Common.channelMaskCHexStrArr(allValidChannels);
/*
Channel mask composed of all supported channels for selected PHY. Used to
validate user input during runtime channel mask configuration.
*/
#define CUI_VALID_CHANNEL_MASK          { `_.slice(channelMaskHexArr,0,6)`, \
                                          `_.slice(channelMaskHexArr,6,12)`, \
                                          `_.slice(channelMaskHexArr,12)` }

/* Setting for FH network name attribute */
#define CONFIG_FH_NETNAME               {"`inst.fhNetname`"}

% if (!networkScript.getNetworkConfigHiddenState(inst, "maxDevices")) {
/* Setting for maximum devices in association table */
#define CONFIG_MAX_DEVICES              `inst.maxDevices`

% }
/*
 Setting for reporting interval - in milliseconds to be set on connected devices
 using configuration request messages
 */
#define CONFIG_REPORTING_INTERVAL       `inst.reportingInterval`

/*
 Setting for polling interval - in milliseconds to be set on connected devices
 using configuration request messages
 */
#define CONFIG_POLLING_INTERVAL         `inst.pollingInterval`

% if (!networkScript.getNetworkConfigHiddenState(inst, "trackingDelayTime")) {
/* Setting for interval in ms between tracking message intervals */
#define TRACKING_DELAY_TIME             `inst.trackingDelayTime`

% }
% // Backoff configs required to be generated for sensor projects only
% if (inst.project.includes("sensor")) {
/* Setting for interval in ms between tracking message intervals */
#define CONFIG_SCAN_BACKOFF_INTERVAL    `inst.scanBackoffInterval`

/* Setting for delay in ms between orphan notifications */
#define CONFIG_ORPHAN_BACKOFF_INTERVAL  `inst.orphanBackoffInterval`

% }
/* Setting for scan duration in seconds */
#define CONFIG_SCAN_DURATION            `inst.scanDuration`

/* Setting for beacon order */
#define CONFIG_MAC_BEACON_ORDER         `inst.macBeaconOrder`

/* Setting for superframe order */
#define CONFIG_MAC_SUPERFRAME_ORDER     `inst.macSuperframeOrder`

/* Setting for minimum backoff exponent */
#define CONFIG_MIN_BE                   `inst.minBe`

/* Setting for maximum backoff exponent */
#define CONFIG_MAX_BE                   `inst.maxBe`

% // FH broadcast configs required to be generated for collector projects only
% if (inst.project.includes("collector")) {
/*
 Setting for FH application broadcast msg generation interval in ms. 
 The stack FH broadcast interval is half of this value to prevent
 transmit queue overflow.
 */
#define FH_BROADCAST_INTERVAL           `inst.fhBroadcastInterval`

/* Setting for FH application broadcast dwell time in ms */
#define FH_BROADCAST_DWELL_TIME         `inst.fhBroadcastDwellTime`
% }

% const isSub1BandSet = (inst.freqBand === "freqBandSub1");
% const curTxPowerCfg = inst.transmitPower;
/* ! Setting for transmit power in dBm */
#define CONFIG_TRANSMIT_POWER           `curTxPowerCfg`

/* Setting to enable frequency hopping mode */
#define CONFIG_FH_ENABLE                `inst.mode === "frequencyHopping"`

% if (!powerScript.getPowerConfigHiddenState(inst, "rxOnIdle")) {
/* Setting to enable RX on when idle. False for sleepy device */
#define CONFIG_RX_ON_IDLE               `inst.rxOnIdle`

% }
/* Setting to enable network security */
#define CONFIG_SECURE                   `inst.secureLevel !== "macSecureDisabled"`

% const keyTableArr = keyTable();
/* Setting for network security key*/
#define KEY_TABLE_DEFAULT_KEY           { `_.slice(keyTableArr,0,8)`, \
                                          `_.slice(keyTableArr,8)` }

% if (!securityScript.getSecurityConfigHiddenState(inst, "smCollectorAuthMethods")) {
/* Setting for authentication methods supported on the collector */
#define SM_COLLECTOR_AUTH_METHODS       (`_.join(inst.smCollectorAuthMethods, "|")`)

% }
% if (!securityScript.getSecurityConfigHiddenState(inst, "smSensorAuthMethods")) {
/* Setting for authentication methods supported on the collector */
#define SM_SENSOR_DEFAULT_AUTH_METHOD   `inst.smSensorAuthMethods`

% }
% if (!securityScript.getSecurityConfigHiddenState(inst, "smDefaultAuthCode")) {
/* Setting for pre-defined authentication code */
#define SM_DEFAULT_AUTH_CODE            `Common.toHexString(inst.smDefaultAuthCode, 5)`

% }
% if (!securityScript.getSecurityConfigHiddenState(inst, "smKeyrefreshTimeout")) {
/* Setting for interval in seconds between key refreshments */
#define SM_KEYREFRESH_TIMEOUT           `inst.smKeyrefreshTimeout`

% }
/* Setting to enable certification test mode */
#define CERTIFICATION_TEST_MODE         `inst.certificationTestMode`

% if (inst.powerTestEnable) {
/* Setting to enable power measurement test mode */
#define POWER_MEAS

% }
% if (!testModeScript.getTestConfigHiddenState(inst, "powerTestProfile")) {
/* Setting for power profile used for power measurement test mode */
#define POWER_TEST_PROFILE              `inst.powerTestProfile`

% }
% if (!testModeScript.getTestConfigHiddenState(inst, "collectorTestRampDataSize")) {
/* Setting for size of test data used for test modes */
#define COLLECTOR_TEST_RAMP_DATA_SIZE   `inst.collectorTestRampDataSize`

% }
% if (!testModeScript.getTestConfigHiddenState(inst, "sensorTestRampDataSize")) {
/* Setting for size of test data used for test modes */
#define SENSOR_TEST_RAMP_DATA_SIZE      `inst.sensorTestRampDataSize`

% }
#ifdef __cplusplus
}
#endif

#endif /* TI_154STACK_CONFIG_H */
